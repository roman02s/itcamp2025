#!/usr/bin/env python3
"""
–¢–µ—Å—Ç YOLO –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–ª–∏–ø–∞–Ω–∏–µ –±–æ–∫—Å–æ–≤
"""

import sys
from pathlib import Path
from ultralytics import YOLO
import cv2
import json

def test_yolo_boxes(model_path: str, test_image: str):
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–ª–∏–ø–∞–Ω–∏–µ –±–æ–∫—Å–æ–≤"""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YOLO –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–ª–∏–ø–∞–Ω–∏–µ –±–æ–∫—Å–æ–≤")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    try:
        model = YOLO(model_path)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = Path(test_image)
    if not image_path.exists():
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
        return False

    print(f"üñºÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path.name}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
    try:
        results = model.predict(
            str(image_path),
            conf=0.25,
            iou=0.7,  # –í—ã—Å–æ–∫–∏–π IoU threshold –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏–ø–∞–Ω–∏—è
            save=False,
            verbose=True
        )

        if not results or len(results) == 0:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return False

        result = results[0]

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        boxes = result.boxes
        if boxes is None or len(boxes) == 0:
            print("‚ùå –ë–æ–∫—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return False

        print(f"\\nüìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(boxes)} –±–æ–∫—Å–æ–≤")

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –±–æ–∫—Å–µ
        detections = []
        for i, box in enumerate(boxes):
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
            conf = box.conf[0].cpu().numpy()
            cls = int(box.cls[0].cpu().numpy())

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞
            class_name = model.names[cls]

            width = x2 - x1
            height = y2 - y1
            center_x = (x1 + x2) / 2
            center_y = (y1 + y2) / 2

            detection = {
                'id': i + 1,
                'class': class_name,
                'confidence': float(conf),
                'bbox': {
                    'x1': float(x1), 'y1': float(y1),
                    'x2': float(x2), 'y2': float(y2),
                    'width': float(width), 'height': float(height),
                    'center_x': float(center_x), 'center_y': float(center_y)
                }
            }

            detections.append(detection)

            print(f"  {i+1}. {class_name}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={conf:.3f}, "
                  f"–ø–æ–∑–∏—Ü–∏—è=({x1:.1f}, {y1:.1f}), "
                  f"—Ä–∞–∑–º–µ—Ä={width:.1f}x{height:.1f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏–ø–∞–Ω–∏–µ –±–æ–∫—Å–æ–≤
        print("\\nüîç –ê–ù–ê–õ–ò–ó –°–õ–ò–ü–ê–ù–ò–Ø –ë–û–ö–°–û–í:")

        overlapping_pairs = []
        close_pairs = []

        for i in range(len(detections)):
            for j in range(i + 1, len(detections)):
                box1 = detections[i]
                box2 = detections[j]

                # –í—ã—á–∏—Å–ª—è–µ–º IoU
                x1_1, y1_1, x2_1, y2_1 = box1['bbox']['x1'], box1['bbox']['y1'], box1['bbox']['x2'], box1['bbox']['y2']
                x1_2, y1_2, x2_2, y2_2 = box2['bbox']['x1'], box2['bbox']['y1'], box2['bbox']['x2'], box2['bbox']['y2']

                # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                x1_inter = max(x1_1, x1_2)
                y1_inter = max(y1_1, y1_2)
                x2_inter = min(x2_1, x2_2)
                y2_inter = min(y2_1, y2_2)

                inter_width = max(0, x2_inter - x1_inter)
                inter_height = max(0, y2_inter - y1_inter)
                inter_area = inter_width * inter_height

                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                box1_area = (x2_1 - x1_1) * (y2_1 - y1_1)
                box2_area = (x2_2 - x1_2) * (y2_2 - y1_2)
                union_area = box1_area + box2_area - inter_area

                iou = inter_area / union_area if union_area > 0 else 0

                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏
                center1_x, center1_y = box1['bbox']['center_x'], box1['bbox']['center_y']
                center2_x, center2_y = box2['bbox']['center_x'], box2['bbox']['center_y']

                distance = ((center1_x - center2_x) ** 2 + (center1_y - center2_y) ** 2) ** 0.5

                if iou > 0.1:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                    overlapping_pairs.append((box1, box2, iou, distance))
                    print(f"  ‚ùå –°–õ–ò–ü–ê–ù–ò–ï: {box1['class']} –∏ {box2['class']}")
                    print(f"     IoU: {iou:.3f}, –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –ø–∏–∫—Å–µ–ª–µ–π")
                elif distance < 30:  # –ë–ª–∏–∑–∫–∏–µ –±–æ–∫—Å—ã
                    close_pairs.append((box1, box2, iou, distance))
                    print(f"  ‚ö†Ô∏è  –ë–õ–ò–ó–ö–ò–ï: {box1['class']} –∏ {box2['class']}")
                    print(f"     –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –ø–∏–∫—Å–µ–ª–µ–π")

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –±–æ–∫—Å–æ–≤: {len(detections)}")
        print(f"   –°–ª–∏–ø—à–∏—Ö—Å—è –ø–∞—Ä: {len(overlapping_pairs)}")
        print(f"   –ë–ª–∏–∑–∫–∏—Ö –ø–∞—Ä: {len(close_pairs)}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_data = {
            'model': model_path,
            'image': str(image_path),
            'detections': detections,
            'overlapping_pairs': len(overlapping_pairs),
            'close_pairs': len(close_pairs),
            'analysis': {
                'has_overlapping': len(overlapping_pairs) > 0,
                'has_close_pairs': len(close_pairs) > 0
            }
        }

        output_file = Path("yolo_test_results.json")
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, indent=2, ensure_ascii=False)

        print(f"\\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")

        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        if len(overlapping_pairs) == 0:
            print("\\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –°–ª–∏–ø–∞–Ω–∏—è –±–æ–∫—Å–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
            if len(close_pairs) == 0:
                print("üèÜ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ –±–æ–∫—Å—ã —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã")
            else:
                print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å {len(close_pairs)} –±–ª–∏–∑–∫–∏—Ö –ø–∞—Ä, –Ω–æ –±–µ–∑ —Å–ª–∏–ø–∞–Ω–∏—è")
            return True
        else:
            print(f"\\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(overlapping_pairs)} —Å–ª–∏–ø—à–∏—Ö—Å—è –ø–∞—Ä")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_yolo_boxes.py <model_path> <image_path>")
        print("–ü—Ä–∏–º–µ—Ä: python test_yolo_boxes.py src/best_yolo_model_fixed.pt data/yolo_dataset/Obrazets-zapolneniya-TN-2025-2-4.pdf_page_1.png")
        return

    model_path = sys.argv[1]
    image_path = sys.argv[2]

    success = test_yolo_boxes(model_path, image_path)

    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
