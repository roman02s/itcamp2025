#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
"""
import json
from pathlib import Path
from src.config import Config
from src.utils import TextProcessor
from src.parser import InvoiceParser


def demo_text_parsing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π"""
    
    print("üßæ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö")
    print("=" * 60)
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    samples = [
        {
            "name": "–¢–æ–≤–∞—Ä–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è –¢–û–†–ì-12",
            "text": """
            –¢–û–í–ê–†–ù–ê–Ø –ù–ê–ö–õ–ê–î–ù–ê–Ø ‚Ññ –¢–ù-2025-001 –æ—Ç 15.01.2025
            
            –ü–æ—Å—Ç–∞–≤—â–∏–∫: –û–û–û "–ê–ª—å—Ñ–∞ –¢–æ—Ä–≥"
            –ò–ù–ù: 1234567890
            –ö–ü–ü: 123456789
            
            –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ó–ê–û "–ë–µ—Ç–∞ –°–Ω–∞–±"  
            –ò–ù–ù: 0987654321
            –ö–ü–ü: 987654321
            
            –ì—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –û–û–û "–ê–ª—å—Ñ–∞ –¢–æ—Ä–≥", –≥. –ú–æ—Å–∫–≤–∞
            
            –ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å: –ó–ê–û "–ë–µ—Ç–∞ –°–Ω–∞–±", –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
            
            –ò—Ç–æ–≥–æ –±–µ–∑ –ù–î–°: 100 000,00
            –ù–î–° 20%: 20 000,00
            –í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: 120 000,00
            """
        },
        {
            "name": "–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞",
            "text": """
            –°–ß–ï–¢-–§–ê–ö–¢–£–†–ê ‚Ññ –°–§-456 –æ—Ç 20.01.2025
            
            –ü—Ä–æ–¥–∞–≤–µ—Ü: –ò–ü –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á
            –ò–ù–ù: 123456789012
            
            –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –û–û–û "–ì–∞–º–º–∞ –ü–ª—é—Å"
            –ò–ù–ù: 5555666677
            –ö–ü–ü: 555566667
            
            –°—É–º–º–∞ –±–µ–∑ –ù–î–°: 50 000,00
            –ù–î–° 18%: 9 000,00
            –ò—Ç–æ–≥–æ —Å –ù–î–°: 59 000,00
            """
        }
    ]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = Config(debug_mode=False)
    text_processor = TextProcessor(config)
    parser = InvoiceParser(config, text_processor)
    
    for i, sample in enumerate(samples, 1):
        print(f"\nüìÑ –û–±—Ä–∞–∑–µ—Ü {i}: {sample['name']}")
        print("-" * 50)
        
        # –ü–∞—Ä—Å–∏–Ω–≥
        result = parser.parse(sample['text'])
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result.get('document_type')}")
        print(f"–ù–æ–º–µ—Ä: {result.get('number')}")
        print(f"–î–∞—Ç–∞: {result.get('date')}")
        
        # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
        supplier = result.get('supplier', {})
        buyer = result.get('buyer', {})
        
        print(f"\n–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.get('name')}")
        print(f"  –ò–ù–ù: {supplier.get('INN')}")
        print(f"  –ö–ü–ü: {supplier.get('KPP')}")
        
        print(f"\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer.get('name')}")
        print(f"  –ò–ù–ù: {buyer.get('INN')}")
        print(f"  –ö–ü–ü: {buyer.get('KPP')}")
        
        # –°—É–º–º—ã
        amounts = result.get('amounts', {})
        print(f"\n–°—É–º–º—ã:")
        if amounts.get('total_without_vat'):
            print(f"  –ë–µ–∑ –ù–î–°: {amounts['total_without_vat']:,.2f} ‚ÇΩ")
        if amounts.get('vat'):
            print(f"  –ù–î–°: {amounts['vat']:,.2f} ‚ÇΩ")
        if amounts.get('total_with_vat'):
            print(f"  –° –ù–î–°: {amounts['total_with_vat']:,.2f} ‚ÇΩ")
        
        print(f"\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence_score', 0):.1%}")


def demo_json_output():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è JSON –≤—ã–≤–æ–¥–∞"""
    
    print("\n\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è JSON API")
    print("=" * 40)
    
    sample_text = """
    –¢–û–í–ê–†–ù–ê–Ø –ù–ê–ö–õ–ê–î–ù–ê–Ø ‚Ññ –¢–ù-2025-003 –æ—Ç 25.01.2025
    
    –ü–æ—Å—Ç–∞–≤—â–∏–∫: –û–û–û "–î–µ–ª—å—Ç–∞ –õ–æ–≥–∏—Å—Ç–∏–∫"
    –ò–ù–ù: 7777888899
    –ö–ü–ü: 777788889
    
    –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ê–û "–≠–ø—Å–∏–ª–æ–Ω –¢—Ä–µ–π–¥"
    –ò–ù–ù: 1111222233
    –ö–ü–ü: 111122223
    
    –°—É–º–º–∞ –±–µ–∑ –ù–î–°: 250 000,00
    –ù–î–° 20%: 50 000,00
    –í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: 300 000,00
    """
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥
    config = Config()
    text_processor = TextProcessor(config)
    parser = InvoiceParser(config, text_processor)
    
    result = parser.parse(sample_text)
    
    # –ö—Ä–∞—Å–∏–≤—ã–π JSON –≤—ã–≤–æ–¥
    print(json.dumps(result, ensure_ascii=False, indent=2))


def demo_file_structure():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("\n\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 30)
    
    def print_tree(path, prefix="", max_depth=3, current_depth=0):
        if current_depth >= max_depth:
            return
            
        items = sorted(path.iterdir()) if path.is_dir() else []
        dirs = [item for item in items if item.is_dir() and not item.name.startswith('.')]
        files = [item for item in items if item.is_file() and not item.name.startswith('.')]
        
        # –í—ã–≤–æ–¥–∏–º –ø–∞–ø–∫–∏
        for i, item in enumerate(dirs):
            is_last_dir = (i == len(dirs) - 1) and len(files) == 0
            current_prefix = "‚îî‚îÄ‚îÄ " if is_last_dir else "‚îú‚îÄ‚îÄ "
            print(f"{prefix}{current_prefix}{item.name}/")
            
            next_prefix = prefix + ("    " if is_last_dir else "‚îÇ   ")
            print_tree(item, next_prefix, max_depth, current_depth + 1)
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã
        for i, item in enumerate(files):
            is_last = i == len(files) - 1
            current_prefix = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
            print(f"{prefix}{current_prefix}{item.name}")
    
    project_root = Path(".")
    print(f"{project_root.name}/")
    print_tree(project_root, max_depth=2)


if __name__ == "__main__":
    try:
        demo_text_parsing()
        demo_json_output()
        demo_file_structure()
        
        print("\n\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   ./run.sh")
        print("   –∏–ª–∏")
        print("   streamlit run streamlit_app.py")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
