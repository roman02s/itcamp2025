# streamlit_app.py
# ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ‚Üí OCR/–ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Marker ‚Üí –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π ‚îÄ‚îÄ
import os
import re
import json
import shutil
import tempfile
import subprocess
from pathlib import Path
from typing import Dict, Optional, Tuple, List
import logging

import streamlit as st

from src.parser import InvoiceParser
from src.utils import TextProcessor, MarkerRunner, YoloMarkerProcessor
from src.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–∞—Ä—Å–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π (Marker OCR)", 
    page_icon="üßæ", 
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    st.title("üßæ –°–µ—Ä–≤–∏—Å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö")
    st.markdown("""
    –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OCR —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é Marker –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ 
    –∏–∑ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö, —Å—á–µ—Ç–æ–≤-—Ñ–∞–∫—Ç—É—Ä –∏ –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    """)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ Marker
        output_format = st.selectbox(
            "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ Marker:",
            ["markdown", "json", "html"],
            help="markdown - –ª—É—á—à–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, json - —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
        )
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ OCR
        force_ocr = st.checkbox(
            "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ OCR", 
            value=True,
            help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR –¥–∞–∂–µ –¥–ª—è PDF —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–µ–º"
        )
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        debug_mode = st.checkbox(
            "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏",
            help="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞")
        max_lines_section = st.slider("–ú–∞–∫—Å. —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–µ–∫—Ü–∏–∏", 5, 20, 8)
        confidence_threshold = st.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 0.1, 1.0, 0.7)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YOLO
        st.subheader("YOLO –¥–µ—Ç–µ–∫—Ü–∏—è")
        use_yolo = st.checkbox(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å YOLO –¥–µ—Ç–µ–∫—Ü–∏—é –ø–æ–ª–µ–π", 
            value=True,
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–Ω–æ–π YOLO –º–æ–¥–µ–ª–∏"
        )
        yolo_confidence = st.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ YOLO", 0.1, 1.0, 0.25)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
            type=["pdf", "png", "jpg", "jpeg", "tiff", "bmp"],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
        
        # –ò–ª–∏ –≤—ã–±–æ—Ä –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
        st.markdown("**–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:**")
        use_sample = st.button("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü –¢–ù-2025")
        
        if use_sample:
            sample_path = Path("data/Obrazets-zapolneniya-TN-2025-2.pdf")
            if sample_path.exists():
                with open(sample_path, "rb") as f:
                    uploaded_file = type('MockFile', (), {
                        'read': lambda: f.read(),
                        'name': sample_path.name
                    })()
            else:
                st.error("–û–±—Ä–∞–∑–µ—Ü —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with col2:
        st.subheader("üîß –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        status_container = st.empty()
        progress_bar = st.progress(0)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    if uploaded_file is not None:
        if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", type="primary"):
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                config = Config(
                    output_format=output_format,
                    force_ocr=force_ocr,
                    max_lines_section=max_lines_section,
                    confidence_threshold=confidence_threshold,
                    debug_mode=debug_mode
                )
                
                # –í—ã–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
                if use_yolo:
                    processor = YoloMarkerProcessor(config)
                    use_enhanced_processing = processor.is_yolo_available()
                    if not use_enhanced_processing:
                        st.warning("‚ö†Ô∏è YOLO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
                else:
                    use_enhanced_processing = False
                
                if not use_enhanced_processing:
                    marker_runner = MarkerRunner(config)
                    text_processor = TextProcessor(config)
                    invoice_parser = InvoiceParser(config, text_processor)
                
                with tempfile.TemporaryDirectory() as tmpdir:
                    tmpdir = Path(tmpdir)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    status_container.info("üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
                    progress_bar.progress(10)
                    
                    input_path = tmpdir / uploaded_file.name
                    with open(input_path, "wb") as f:
                        f.write(uploaded_file.read())
                    
                    if use_enhanced_processing:
                        # YOLO + Marker –æ–±—Ä–∞–±–æ—Ç–∫–∞
                        status_container.info("üéØ YOLO –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ–ª–µ–π...")
                        progress_bar.progress(20)
                        
                        status_container.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ OCR...")
                        progress_bar.progress(50)
                        
                        status_container.info("üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–æ–ª–µ–π...")
                        progress_bar.progress(80)
                        
                        # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ YOLO + Marker
                        enhanced_result = processor.process_document(input_path, tmpdir / "output")
                        
                        status_container.success("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        progress_bar.progress(100)
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        display_enhanced_results(enhanced_result, debug_mode)
                        
                    else:
                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                        status_container.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ OCR...")
                        progress_bar.progress(30)
                        
                        try:
                            output_path = marker_runner.run(input_path, tmpdir / "marker_out")
                            
                            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                            status_container.info("üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
                            progress_bar.progress(60)
                            
                            text = text_processor.extract_text_from_marker_output(output_path)
                            
                            if debug_mode:
                                st.expander("üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤)").text(text[:2000])
                            
                            # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                            status_container.info("üß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
                            progress_bar.progress(80)
                            
                            result = invoice_parser.parse(text)
                            
                            status_container.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                            progress_bar.progress(100)
                            
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            display_results(result, debug_mode, text if debug_mode else None)
                        
                    except subprocess.CalledProcessError as e:
                        status_container.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Marker OCR")
                        st.error(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
                        if e.stderr:
                            st.code(e.stderr, language="bash")
                        
            except Exception as e:
                status_container.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
                
                if debug_mode:
                    st.exception(e)

def display_results(result: Dict, debug_mode: bool, raw_text: Optional[str] = None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", result.get("document_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    
    with col2:
        st.metric("–ù–æ–º–µ—Ä", result.get("number") or "–ù–µ –Ω–∞–π–¥–µ–Ω")
    
    with col3:
        st.metric("–î–∞—Ç–∞", result.get("date") or "–ù–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    with col4:
        amounts = result.get("amounts", {})
        total = amounts.get("total_with_vat") or amounts.get("total_without_vat")
        st.metric("–°—É–º–º–∞", f"{total:,.2f} ‚ÇΩ" if total else "–ù–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ç–∞–±–∞—Ö
    tab1, tab2, tab3, tab4 = st.tabs(["üë• –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã", "üí∞ –°—É–º–º—ã", "üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞", "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è"])
    
    with tab1:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ü–æ—Å—Ç–∞–≤—â–∏–∫")
            supplier = result.get("supplier", {})
            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {supplier.get('name') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            st.write(f"**–ò–ù–ù:** {supplier.get('INN') or '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
            st.write(f"**–ö–ü–ü:** {supplier.get('KPP') or '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
        
        with col2:
            st.subheader("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å")
            buyer = result.get("buyer", {})
            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {buyer.get('name') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            st.write(f"**–ò–ù–ù:** {buyer.get('INN') or '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
            st.write(f"**–ö–ü–ü:** {buyer.get('KPP') or '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
    
    with tab2:
        amounts = result.get("amounts", {})
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "–°—É–º–º–∞ –±–µ–∑ –ù–î–°", 
                f"{amounts.get('total_without_vat'):,.2f} ‚ÇΩ" if amounts.get('total_without_vat') else "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        with col2:
            st.metric(
                "–ù–î–°",
                f"{amounts.get('vat'):,.2f} ‚ÇΩ" if amounts.get('vat') else "–ù–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        with col3:
            st.metric(
                "–°—É–º–º–∞ —Å –ù–î–°",
                f"{amounts.get('total_with_vat'):,.2f} ‚ÇΩ" if amounts.get('total_with_vat') else "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
    
    with tab3:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ì—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å")
            shipper = result.get("shipper")
            st.write(shipper if shipper else "–ù–µ —É–∫–∞–∑–∞–Ω")
        
        with col2:
            st.subheader("–ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å") 
            consignee = result.get("consignee")
            st.write(consignee if consignee else "–ù–µ —É–∫–∞–∑–∞–Ω")
    
    with tab4:
        if debug_mode:
            st.subheader("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            # JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.subheader("–ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (JSON)")
            st.json(result)
            
            # –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
            if raw_text:
                st.subheader("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
                st.text_area("–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", raw_text, height=300)
        else:
            st.info("–í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        json_str = json.dumps(result, ensure_ascii=False, indent=2)
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å JSON",
            data=json_str,
            file_name=f"invoice_data_{result.get('number', 'unknown')}.json",
            mime="application/json"
        )
    
    with col2:
        # CSV —ç–∫—Å–ø–æ—Ä—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        csv_data = create_csv_export(result)
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å CSV", 
            data=csv_data,
            file_name=f"invoice_data_{result.get('number', 'unknown')}.csv",
            mime="text/csv"
        )

def create_csv_export(result: Dict) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    import io
    import csv
    
    output = io.StringIO()
    writer = csv.writer(output)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow([
        "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–ù–æ–º–µ—Ä", "–î–∞—Ç–∞",
        "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ò–ù–ù –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–ö–ü–ü –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
        "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ò–ù–ù –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", "–ö–ü–ü –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", 
        "–°—É–º–º–∞ –±–µ–∑ –ù–î–°", "–ù–î–°", "–°—É–º–º–∞ —Å –ù–î–°"
    ])
    
    # –î–∞–Ω–Ω—ã–µ
    supplier = result.get("supplier", {})
    buyer = result.get("buyer", {})
    amounts = result.get("amounts", {})
    
    writer.writerow([
        result.get("document_type", ""),
        result.get("number", ""),
        result.get("date", ""),
        supplier.get("name", ""),
        supplier.get("INN", ""),
        supplier.get("KPP", ""),
        buyer.get("name", ""),
        buyer.get("INN", ""),
        buyer.get("KPP", ""),
        amounts.get("total_without_vat", ""),
        amounts.get("vat", ""),
        amounts.get("total_with_vat", "")
    ])
    
    return output.getvalue()


def display_enhanced_results(enhanced_result: Dict, debug_mode: bool):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (YOLO + Marker)"""
    
    st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã YOLO + Marker –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if not enhanced_result.get("processing_success", False):
        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        if "error" in enhanced_result:
            st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {enhanced_result['error']}")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏
    yolo_data = enhanced_result.get("yolo_detection")
    if yolo_data:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–ª–µ–π")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø–æ–ª–µ–π", yolo_data["field_count"])
        
        with col2:
            summary = yolo_data.get("summary", {})
            st.metric("–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", summary.get("high_confidence_fields", 0))
        
        with col3:
            avg_conf = summary.get("average_confidence", 0)
            st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_conf:.2f}")
        
        with col4:
            detected_types = len(summary.get("detected_types", []))
            st.metric("–¢–∏–ø–æ–≤ –ø–æ–ª–µ–π", detected_types)
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ–ª—è–º
        if yolo_data["fields"]:
            st.subheader("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª–µ–π
            fields_data = []
            for field in yolo_data["fields"]:
                fields_data.append({
                    "–¢–∏–ø –ø–æ–ª—è": field["field_name"],
                    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{field['confidence']:.3f}",
                    "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã": f"({field['bbox']['x1']:.0f}, {field['bbox']['y1']:.0f}) - ({field['bbox']['x2']:.0f}, {field['bbox']['y2']:.0f})",
                    "–†–∞–∑–º–µ—Ä": f"{field['bbox']['width']:.0f} √ó {field['bbox']['height']:.0f}"
                })
            
            import pandas as pd
            df = pd.DataFrame(fields_data)
            st.dataframe(df, use_container_width=True)
    
    # –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    annotated_image = enhanced_result.get("annotated_image")
    if annotated_image and Path(annotated_image).exists():
        st.subheader("üñºÔ∏è –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        st.image(annotated_image, caption="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è", use_container_width=True)
    
    # –¢–µ–∫—Å—Ç—ã –ø–æ–ª–µ–π
    field_texts = enhanced_result.get("field_texts", {})
    if field_texts:
        st.subheader("üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –ø–æ–ª–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        tabs = st.tabs(list(field_texts.keys())[:6])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–æ–≤
        
        for i, (field_name, text) in enumerate(field_texts.items()):
            if i < len(tabs):
                with tabs[i]:
                    st.text_area(f"–¢–µ–∫—Å—Ç –ø–æ–ª—è {field_name}", text, height=100, disabled=True)
    
    # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
    full_text = enhanced_result.get("marker_text")
    if full_text:
        with st.expander("üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"):
            st.text_area("Marker OCR", full_text[:2000] + "..." if len(full_text) > 2000 else full_text, 
                        height=300, disabled=True)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if debug_mode:
        with st.expander("üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            st.json(enhanced_result)
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        json_str = json.dumps(enhanced_result, ensure_ascii=False, indent=2, default=str)
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (JSON)",
            data=json_str,
            file_name="yolo_marker_results.json",
            mime="application/json"
        )
    
    with col2:
        # –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–ª–µ–π
        if field_texts:
            fields_json = json.dumps(field_texts, ensure_ascii=False, indent=2)
            st.download_button(
                label="üìù –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ–ª–µ–π (JSON)",
                data=fields_json,
                file_name="field_texts.json",
                mime="application/json"
            )
    
    with col3:
        # CSV —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–µ–π
        if yolo_data and yolo_data["fields"]:
            csv_data = create_fields_csv_export(yolo_data["fields"], field_texts)
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π (CSV)",
                data=csv_data,
                file_name="detected_fields.csv",
                mime="text/csv"
            )


def create_fields_csv_export(fields: List[Dict], field_texts: Dict[str, str]) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª–µ–π"""
    import io
    import csv
    
    output = io.StringIO()
    writer = csv.writer(output)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow([
        "–¢–∏–ø –ø–æ–ª—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "X1", "Y1", "X2", "Y2", 
        "–®–∏—Ä–∏–Ω–∞", "–í—ã—Å–æ—Ç–∞", "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
    ])
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π
    for field in fields:
        bbox = field["bbox"]
        field_type = field["field_type"]
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        extracted_text = ""
        for text_key, text_value in field_texts.items():
            if field_type in text_key:
                extracted_text = text_value
                break
        
        writer.writerow([
            field_type,
            field["field_name"],
            f"{field['confidence']:.3f}",
            f"{bbox['x1']:.0f}",
            f"{bbox['y1']:.0f}",
            f"{bbox['x2']:.0f}",
            f"{bbox['y2']:.0f}",
            f"{bbox['width']:.0f}",
            f"{bbox['height']:.0f}",
            extracted_text
        ])
    
    return output.getvalue()


if __name__ == "__main__":
    main()
