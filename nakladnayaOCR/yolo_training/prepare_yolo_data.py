#!/usr/bin/env python3
"""
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è YOLO –º–æ–¥–µ–ª–∏
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –≤ —Ñ–æ—Ä–º–∞—Ç YOLO
"""

import json
import os
import shutil
from pathlib import Path
from typing import Dict, List, Tuple
import yaml

class YoloDataPreparator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö YOLO"""
    
    def __init__(self, source_dir: str, output_dir: str):
        self.source_dir = Path(source_dir)
        self.output_dir = Path(output_dir)
        
        # –ö–ª–∞—Å—Å—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        self.classes = [
            "delivery-date",    # 0
            "order-date",       # 1  
            "carrier",          # 2
            "recipient",        # 3
            "payload",          # 4
            "price",            # 5
            "address"           # 6
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.setup_directories()
    
    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è YOLO"""
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ YOLOv8
        for split in ['train', 'val']:
            (self.output_dir / split / 'images').mkdir(parents=True, exist_ok=True)
            (self.output_dir / split / 'labels').mkdir(parents=True, exist_ok=True)
    
    def convert_box_to_yolo(self, box: Dict, image_width: int, image_height: int) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–æ–∫—Å–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –≤ —Ñ–æ—Ä–º–∞—Ç YOLO"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        x = float(box['x'])
        y = float(box['y'])
        width = float(box['width'])
        height = float(box['height'])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—Ä + —Ä–∞–∑–º–µ—Ä—ã
        center_x = x + width / 2
        center_y = y + height / 2
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Ä–∞–∑–º–µ—Ä–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        norm_center_x = center_x / image_width
        norm_center_y = center_y / image_height
        norm_width = width / image_width
        norm_height = height / image_height
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–ª–∞—Å—Å–∞
        class_name = box['label']
        if class_name not in self.classes:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å {class_name}")
            return None
        
        class_idx = self.classes.index(class_name)
        
        # –§–æ—Ä–º–∞—Ç YOLO: class_id center_x center_y width height
        return f"{class_idx} {norm_center_x:.6f} {norm_center_y:.6f} {norm_width:.6f} {norm_height:.6f}"
    
    def process_annotation_file(self, annotation_path: Path) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π"""
        try:
            with open(annotation_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            image_filename = data['key']
            image_width = data['width']
            image_height = data['height']
            boxes = data['boxes']
            
            # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            image_path = self.source_dir / image_filename
            if not image_path.exists():
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                return False
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–æ–∫—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç YOLO
            yolo_annotations = []
            for box in boxes:
                yolo_line = self.convert_box_to_yolo(box, image_width, image_height)
                if yolo_line:
                    yolo_annotations.append(yolo_line)
            
            if not yolo_annotations:
                print(f"–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è {image_filename}")
                return False
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ–∫–∞ –≤—Å–µ –≤ train, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä)
            split = 'train'
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            target_image_path = self.output_dir / split / 'images' / image_filename
            shutil.copy2(image_path, target_image_path)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            annotation_filename = Path(image_filename).stem + '.txt'
            target_annotation_path = self.output_dir / split / 'labels' / annotation_filename
            
            with open(target_annotation_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(yolo_annotations))
            
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {image_filename} -> {len(yolo_annotations)} –æ–±—ä–µ–∫—Ç–æ–≤")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {annotation_path}: {e}")
            return False
    
    def create_dataset_yaml(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        dataset_config = {
            'path': str(self.output_dir.absolute()),
            'train': 'train/images',
            'val': 'train/images',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –Ω–∞–±–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            'nc': len(self.classes),
            'names': {i: name for i, name in enumerate(self.classes)}
        }
        
        yaml_path = self.output_dir / 'dataset.yaml'
        with open(yaml_path, 'w', encoding='utf-8') as f:
            yaml.dump(dataset_config, f, default_flow_style=False, allow_unicode=True)
        
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {yaml_path}")
    
    def prepare_data(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è YOLO...")
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        annotation_files = list(self.source_dir.glob('*.json'))
        
        if not annotation_files:
            print(f"–§–∞–π–ª—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {self.source_dir}")
            return False
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π: {len(annotation_files)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        processed_count = 0
        for ann_file in annotation_files:
            if self.process_annotation_file(ann_file):
                processed_count += 1
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞
        self.create_dataset_yaml()
        
        print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_count}/{len(annotation_files)}")
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")
        
        return processed_count > 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    source_dir = "/home/rsim/itcamp2025/nakladnayaOCR/data/yolo_dataset"
    output_dir = "/home/rsim/itcamp2025/nakladnayaOCR/yolo_training/dataset"
    
    preparator = YoloDataPreparator(source_dir, output_dir)
    success = preparator.prepare_data()
    
    if success:
        print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è YOLO!")
        print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  üìÅ {output_dir}/")
        print(f"    üìÅ train/")
        print(f"      üìÅ images/  - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        print(f"      üìÅ labels/  - –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YOLO")
        print(f"    üìÑ dataset.yaml - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()
