#!/usr/bin/env python3
"""
–û–±—É—á–µ–Ω–∏–µ YOLO –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–ª–µ–π –≤ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
"""

import os
import sys
from pathlib import Path
import yaml
import torch
from ultralytics import YOLO

class YoloTrainer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è YOLO –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, dataset_path: str, model_output_dir: str):
        self.dataset_path = Path(dataset_path)
        self.model_output_dir = Path(model_output_dir)
        self.model_output_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        
    def load_dataset_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        config_path = self.dataset_path / 'dataset.yaml'
        
        if not config_path.exists():
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_path}")
        
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞:")
        print(f"  –ö–ª–∞—Å—Å—ã: {config['nc']}")
        print(f"  –ù–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤: {list(config['names'].values())}")
        
        return config
    
    def train_model(self, epochs: int = 100, batch_size: int = 16, imgsz: int = 640):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ YOLO"""
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å YOLOv8
        model = YOLO('yolov8n.pt')  # nano –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        train_args = {
            'data': str(self.dataset_path / 'dataset.yaml'),
            'epochs': epochs,
            'batch': batch_size,
            'imgsz': imgsz,
            'device': self.device,
            'project': str(self.model_output_dir),
            'name': 'invoice_field_detection',
            'save_period': 10,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —ç–ø–æ—Ö
            'patience': 50,     # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π
            'save': True,
            'cache': True,      # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            'workers': 1,       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            'verbose': True,
            
            # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            # 'hsv_h': 0.015,     # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∞
            # 'hsv_s': 0.7,       # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏  
            # 'hsv_v': 0.4,       # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
            'degrees': 0.0,     # –ü–æ–≤–æ—Ä–æ—Ç (–æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
            'translate': 0.0,   # –°–¥–≤–∏–≥
            'scale': 0.0,       # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            'shear': 0.0,       # –°–¥–≤–∏–≥ (–æ—Ç–∫–ª—é—á–µ–Ω)
            'perspective': 0.0, # –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞)
            'flipud': 0.0,      # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç (–æ—Ç–∫–ª—é—á–µ–Ω)
            'fliplr': 0.0,      # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
            'mosaic': 0.0,      # –ú–æ–∑–∞–∏–∫–∞
            'mixup': 0.0,       # –°–º–µ—à–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            'copy_paste': 0.0,  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        }
        
        print("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è: {train_args}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
            results = model.train(**train_args)
            
            print(f"–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.model_output_dir}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –≤ –∫–æ—Ä–µ–Ω—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            best_model_path = self.model_output_dir / 'invoice_field_detection' / 'weights' / 'best.pt'
            if best_model_path.exists():
                final_model_path = self.model_output_dir / 'best_invoice_model.pt'
                import shutil
                shutil.copy2(best_model_path, final_model_path)
                print(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤: {final_model_path}")
            
            return results
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
            raise
    
    def validate_model(self, model_path: str = None):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if model_path is None:
            model_path = self.model_output_dir / 'best_invoice_model.pt'
        
        if not Path(model_path).exists():
            print(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            return None
        
        model = YOLO(model_path)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        results = model.val(
            data=str(self.dataset_path / 'dataset.yaml'),
            device=self.device
        )
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"  mAP50: {results.box.map50:.4f}")
        print(f"  mAP50-95: {results.box.map:.4f}")
        
        return results
    
    def test_inference(self, image_path: str, model_path: str = None):
        """–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        if model_path is None:
            model_path = self.model_output_dir / 'best_invoice_model.pt'
        
        if not Path(model_path).exists():
            print(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            return None
        
        model = YOLO(model_path)
        
        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        results = model(image_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        output_path = self.model_output_dir / 'test_prediction.jpg'
        results[0].save(str(output_path))
        
        print(f"–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–µ–∫—Ü–∏–∏
        for result in results:
            boxes = result.boxes
            if boxes is not None:
                for box in boxes:
                    class_id = int(box.cls[0])
                    confidence = float(box.conf[0])
                    coords = box.xyxy[0].tolist()
                    
                    print(f"–ö–ª–∞—Å—Å: {class_id}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}, –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords}")
        
        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—É—Ç–∏
    dataset_path = "/home/rsim/itcamp2025/nakladnayaOCR/yolo_training/dataset"
    model_output_dir = "/home/rsim/itcamp2025/nakladnayaOCR/yolo_training/models"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
    if not Path(dataset_path).exists():
        print(f"‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {dataset_path}")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ prepare_yolo_data.py")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = YoloTrainer(dataset_path, model_output_dir)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = trainer.load_dataset_config()
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å (–º–Ω–æ–≥–æ —ç–ø–æ—Ö –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        results = trainer.train_model(
            epochs=40,     # –ú–Ω–æ–≥–æ —ç–ø–æ—Ö –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
            batch_size=1,   # –ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á –∏–∑-–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
            imgsz=1200       # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        print("\nüìä –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
        val_results = trainer.validate_model()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        test_image = Path(dataset_path) / 'train' / 'images' / 'Obrazets-zapolneniya-TN-2025-2-4.pdf_page_1.png'
        if test_image.exists():
            print("\nüîç –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
            trainer.test_inference(str(test_image))
        
        print("\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {model_output_dir}/best_invoice_model.pt")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
