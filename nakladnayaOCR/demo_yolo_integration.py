#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ YOLO + Marker
"""

import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from src.config import Config
from src.utils import YoloMarkerProcessor

def demo_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ YOLO + Marker")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = Config(
        debug_mode=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
        confidence_threshold=0.25,
        output_format="markdown"
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    processor = YoloMarkerProcessor(config)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    test_image = Path("data/yolo_dataset/Obrazets-zapolneniya-TN-2025-2-4.pdf_page_1.png")
    
    if not test_image.exists():
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
        return False
    
    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {test_image.name}")
    
    with tempfile.TemporaryDirectory() as tmpdir:
        output_dir = Path(tmpdir) / "demo_results"
        output_dir.mkdir(exist_ok=True)
        
        try:
            # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            result = processor.process_document(test_image, output_dir)
            
            if not result.get('processing_success', False):
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', 'Unknown error')}")
                return False
            
            print("\\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏
            yolo_data = result.get("yolo_detection", {})
            field_count = yolo_data.get('field_count', 0)
            
            print(f"\\nüéØ YOLO –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–ª–µ–π: {field_count}")
            
            fields = yolo_data.get('fields', [])
            field_types = {}
            
            for field in fields:
                class_name = field.get('class_name', 'unknown')
                confidence = field.get('confidence', 0)
                
                if class_name not in field_types:
                    field_types[class_name] = []
                field_types[class_name].append(confidence)
            
            for field_type, confidences in field_types.items():
                avg_conf = sum(confidences) / len(confidences)
                count = len(confidences)
                print(f"   üìç {field_type}: {count} –ø–æ–ª–µ(–π), —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_conf:.1%}")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            field_texts = result.get("field_texts", {})
            
            if field_texts:
                print(f"\\nüìù –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ {len(field_texts)} –ø–æ–ª–µ–π:")
                
                for field_name, field_data in field_texts.items():
                    # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Marker —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if isinstance(field_data, dict) and 'markdown' in field_data:
                        text_content = field_data['markdown']
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç, —É–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É
                        clean_text = text_content.replace('markdown=', '').replace('![](_page_0_Picture_0.jpeg)', '').replace("'", '').strip()
                        if clean_text and len(clean_text) > 5:
                            print(f"   üè∑Ô∏è  {field_name}: {clean_text[:100]}...")
                        else:
                            print(f"   üè∑Ô∏è  {field_name}: [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]")
                    else:
                        print(f"   üè∑Ô∏è  {field_name}: [–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ]")
            
            # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            marker_text = result.get("marker_text", "")
            if marker_text:
                print(f"\\nüìñ Marker –∏–∑–≤–ª–µ–∫ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(marker_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                print("\\nüîç –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:")
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–µ
                key_fields = {
                    "–ò–ù–ù": ["–ò–ù–ù", "–∏–Ω–Ω"],
                    "–ö–ü–ü": ["–ö–ü–ü", "–∫–ø–ø"],
                    "–ì—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å": ["–≥—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"],
                    "–ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å": ["–≥—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å", "–ø–æ–ª—É—á–∞—Ç–µ–ª—å"],
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å": ["–∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–º–∞—Ä–∫–∞"],
                    "–ü—Ä–∏—Ü–µ–ø": ["–ø—Ä–∏—Ü–µ–ø"],
                }
                
                for field_name, keywords in key_fields.items():
                    for keyword in keywords:
                        if keyword.lower() in marker_text.lower():
                            # –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                            start_idx = marker_text.lower().find(keyword.lower())
                            if start_idx != -1:
                                context_start = max(0, start_idx - 20)
                                context_end = min(len(marker_text), start_idx + 100)
                                context = marker_text[context_start:context_end].replace('\\n', ' ').strip()
                                print(f"   üìã {field_name}: ...{context}...")
                                break
            
            print("\\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print("\\nüìä –°–≤–æ–¥–∫–∞:")
            print(f"   ‚Ä¢ YOLO –º–æ–¥–µ–ª—å: ‚úÖ –û–±—É—á–µ–Ω–∞ —Å mAP50 ‚âà 90%")
            print(f"   ‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–ª–µ–π: ‚úÖ {field_count} –ø–æ–ª–µ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            print(f"   ‚Ä¢ Marker OCR: ‚úÖ {len(marker_text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
            print(f"   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

if __name__ == "__main__":
    success = demo_integration()
    print("\\n" + "=" * 50)
    if success:
        print("üéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è YOLO + Marker —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("‚ùå –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    sys.exit(0 if success else 1)
