#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –±–æ–∫—Å–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
"""

import json
from pathlib import Path
from typing import List, Dict, Tuple

def calculate_iou(box1: Dict, box2: Dict) -> float:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ IoU (Intersection over Union) –¥–≤—É—Ö –±–æ–∫—Å–æ–≤"""
    x1_1, y1_1 = float(box1['x']), float(box1['y'])
    x2_1, y2_1 = x1_1 + float(box1['width']), y1_1 + float(box1['height'])

    x1_2, y1_2 = float(box2['x']), float(box2['y'])
    x2_2, y2_2 = x1_2 + float(box2['width']), y1_2 + float(box2['height'])

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    x1_inter = max(x1_1, x1_2)
    y1_inter = max(y1_1, y1_2)
    x2_inter = min(x2_1, x2_2)
    y2_inter = min(y2_1, y2_2)

    # –ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    inter_width = max(0, x2_inter - x1_inter)
    inter_height = max(0, y2_inter - y1_inter)
    inter_area = inter_width * inter_height

    # –ü–ª–æ—â–∞–¥–∏ –±–æ–∫—Å–æ–≤
    box1_area = float(box1['width']) * float(box1['height'])
    box2_area = float(box2['width']) * float(box2['height'])

    # IoU
    union_area = box1_area + box2_area - inter_area
    if union_area == 0:
        return 0.0

    return inter_area / union_area

def check_overlapping_boxes(annotation_file: Path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –±–æ–∫—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π"""

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {annotation_file.name}")

    with open(annotation_file, 'r', encoding='utf-8') as f:
        data = json.load(f)

    boxes = data['boxes']
    width = data['width']
    height = data['height']

    print(f"üìä –í—Å–µ–≥–æ –±–æ–∫—Å–æ–≤: {len(boxes)}")
    print(f"üìê –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä
    overlapping_pairs = []
    close_pairs = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä—ã –±–æ–∫—Å–æ–≤
    for i in range(len(boxes)):
        for j in range(i + 1, len(boxes)):
            box1 = boxes[i]
            box2 = boxes[j]

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏
            center1_x = float(box1['x']) + float(box1['width']) / 2
            center1_y = float(box1['y']) + float(box1['height']) / 2

            center2_x = float(box2['x']) + float(box2['width']) / 2
            center2_y = float(box2['y']) + float(box2['height']) / 2

            distance = ((center1_x - center2_x) ** 2 + (center1_y - center2_y) ** 2) ** 0.5

            # –í—ã—á–∏—Å–ª—è–µ–º IoU
            iou = calculate_iou(box1, box2)

            if iou > 0:
                overlapping_pairs.append((box1, box2, iou, distance))
                print(f"‚ö†Ô∏è  –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï: {box1['label']} –∏ {box2['label']}")
                print(f"   IoU: {iou:.3f}, –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏: {distance:.1f} –ø–∏–∫—Å–µ–ª–µ–π")
            elif distance < 50:  # –ë–ª–∏–∑–∫–∏–µ –±–æ–∫—Å—ã (–º–µ–Ω—å—à–µ 50 –ø–∏–∫—Å–µ–ª–µ–π)
                close_pairs.append((box1, box2, iou, distance))
                print(f"‚ö†Ô∏è  –ë–õ–ò–ó–ö–ò–ï: {box1['label']} –∏ {box2['label']}")
                print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –ø–∏–∫—Å–µ–ª–µ–π")

    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ü–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø–∞—Ä: {len(overlapping_pairs)}")
    print(f"   –ë–ª–∏–∑–∫–∏—Ö –ø–∞—Ä: {len(close_pairs)}")

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –±–æ–∫—Å–∞
    print(f"\nüè∑Ô∏è  –ê–ù–ê–õ–ò–ó –ë–û–ö–°–û–í:")
    for i, box in enumerate(boxes):
        x, y = float(box['x']), float(box['y'])
        w, h = float(box['width']), float(box['height'])

        print(f"   {i+1}. {box['label']}: "
              f"–ø–æ–∑–∏—Ü–∏—è=({x:.1f}, {y:.1f}), "
              f"—Ä–∞–∑–º–µ—Ä={w:.1f}x{h:.1f}, "
              f"—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ={w/h:.2f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –±–æ–∫—Å
        if h < 20 or w < 50:
            print(f"      ‚ö†Ô∏è  –ú–ê–õ–ï–ù–¨–ö–ò–ô –ë–û–ö–°!")

    return len(overlapping_pairs), len(close_pairs)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    annotation_file = Path("data/yolo_dataset/annotated_data.json")

    if not annotation_file.exists():
        print(f"‚ùå –§–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {annotation_file}")
        return

    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –±–æ–∫—Å–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)

    overlapping, close = check_overlapping_boxes(annotation_file)

    print("\n" + "=" * 50)
    if overlapping > 0:
        print(f"‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {overlapping} –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –±–æ–∫—Å–æ–≤")
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –±–æ–∫—Å—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ–∂–¥—É –±–ª–∏–∑–∫–∏–º–∏ –ø–æ–ª—è–º–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
        print("3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –±–æ–∫—Å–∞–º–∏")
    else:
        print("‚úÖ –ü–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –±–æ–∫—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if close > 0:
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {close} –±–ª–∏–∑–∫–∏—Ö –ø–∞—Ä –±–æ–∫—Å–æ–≤")
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–ª–∏–∑–∫–∏–µ –±–æ–∫—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏")
        print("2. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±–ª–∏–∑–∫–∏—Ö –ø–æ–ª–µ–π –≤ –æ–¥–Ω–æ")

if __name__ == "__main__":
    main()
