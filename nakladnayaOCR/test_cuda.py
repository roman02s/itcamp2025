#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
"""

import torch
import sys

def test_cuda():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CUDA –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ CUDA...")
    print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA
    cuda_available = torch.cuda.is_available()
    print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {cuda_available}")
    
    if cuda_available:
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {torch.cuda.device_count()}")
        for i in range(torch.cuda.device_count()):
            print(f"GPU {i}: {torch.cuda.get_device_name(i)}")
            print(f"  –ü–∞–º—è—Ç—å: {torch.cuda.get_device_properties(i).total_memory / 1024**3:.1f} GB")
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ GPU
        try:
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ GPU...")
            device = torch.device('cuda:0')
            x = torch.randn(1000, 1000, device=device)
            y = torch.randn(1000, 1000, device=device)
            z = torch.matmul(x, y)
            print("‚úÖ –ú–∞—Ç—Ä–∏—á–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ GPU —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ GPU
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ GPU –ø–∞–º—è—Ç–∏: {torch.cuda.memory_allocated() / 1024**2:.1f} MB")
            print(f"–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ GPU –ø–∞–º—è—Ç–∏: {torch.cuda.memory_reserved() / 1024**2:.1f} MB")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPU: {e}")
            return False
    else:
        print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ NVIDIA –¥—Ä–∞–π–≤–µ—Ä")
        print("  2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ NVIDIA Container Runtime")
        print("  3. –ó–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–ª–∞–≥–æ–º --gpus")
        return False
    
    return True

if __name__ == "__main__":
    success = test_cuda()
    sys.exit(0 if success else 1)
