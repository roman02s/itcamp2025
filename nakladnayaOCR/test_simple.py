#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ Marker
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from src.config import Config
from src.utils import TextProcessor
from src.parser import InvoiceParser


def test_text_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—Ä–∞–∑—Ü–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π"""
    
    # –û–±—Ä–∞–∑–µ—Ü —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    sample_text = """
    –¢–û–í–ê–†–ù–ê–Ø –ù–ê–ö–õ–ê–î–ù–ê–Ø ‚Ññ –¢–ù-2025-001 –æ—Ç 15.01.2025
    
    –ü–æ—Å—Ç–∞–≤—â–∏–∫: –û–û–û "–ê–ª—å—Ñ–∞ –¢–æ—Ä–≥"
    –ò–ù–ù: 1234567890
    –ö–ü–ü: 123456789
    
    –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ó–ê–û "–ë–µ—Ç–∞ –°–Ω–∞–±"  
    –ò–ù–ù: 0987654321
    –ö–ü–ü: 987654321
    
    –ì—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –û–û–û "–ê–ª—å—Ñ–∞ –¢–æ—Ä–≥", –≥. –ú–æ—Å–∫–≤–∞
    
    –ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å: –ó–ê–û "–ë–µ—Ç–∞ –°–Ω–∞–±", –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
    
    –ò—Ç–æ–≥–æ –±–µ–∑ –ù–î–°: 100 000,00
    –ù–î–° 20%: 20 000,00
    –í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: 120 000,00
    """
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config = Config(debug_mode=True)
    text_processor = TextProcessor(config)
    parser = InvoiceParser(config, text_processor)
    
    print("üßæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü–∞—Ä—Å–∏–Ω–≥
    result = parser.parse(sample_text)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result.get('document_type')}")
    print(f"–ù–æ–º–µ—Ä: {result.get('number')}")
    print(f"–î–∞—Ç–∞: {result.get('date')}")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence_score', 0):.2f}")
    
    print("\nüë• –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã:")
    supplier = result.get('supplier', {})
    print(f"  –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.get('name')}")
    print(f"  –ò–ù–ù: {supplier.get('INN')}")
    print(f"  –ö–ü–ü: {supplier.get('KPP')}")
    
    buyer = result.get('buyer', {})
    print(f"  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer.get('name')}")
    print(f"  –ò–ù–ù: {buyer.get('INN')}")
    print(f"  –ö–ü–ü: {buyer.get('KPP')}")
    
    print(f"\nüöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞:")
    print(f"  –ì—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {result.get('shipper')}")
    print(f"  –ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å: {result.get('consignee')}")
    
    print(f"\nüí∞ –°—É–º–º—ã:")
    amounts = result.get('amounts', {})
    print(f"  –ë–µ–∑ –ù–î–°: {amounts.get('total_without_vat')}")
    print(f"  –ù–î–°: {amounts.get('vat')}")
    print(f"  –° –ù–î–°: {amounts.get('total_with_vat')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    success_indicators = [
        result.get('number') is not None,
        result.get('date') is not None,
        supplier.get('name') is not None,
        supplier.get('INN') is not None,
        buyer.get('name') is not None,
        buyer.get('INN') is not None,
        amounts.get('total_with_vat') is not None
    ]
    
    success_rate = sum(success_indicators) / len(success_indicators)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:")
    print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π: {sum(success_indicators)}/{len(success_indicators)}")
    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
    print(f"  –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {result.get('confidence_score', 0):.1%}")
    
    if success_rate >= 0.7:
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    return result


if __name__ == "__main__":
    test_text_parsing()
